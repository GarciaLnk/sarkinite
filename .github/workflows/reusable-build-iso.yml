name: Reusable ISO
on:
  workflow_call:
    inputs:
      image_flavors:
        description: "JSON string of flavors to build, '[main, nvidia]'"
        default: "['main', 'nvidia']"
        type: string
      brand_name:
        description: "The Desktop Environment: 'sarkinite'"
        required: true
        type: string
      stream_name:
        description: "The Fedora Version: stable or testing"
        required: true
        type: string
      upload-to-cloudflare:
        description: "Upload to Cloudflare"
        required: false
        default: true
        type: boolean

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: "${{ github.event.repository.name }}"
  ISO_BUILD_DIR: "${{ github.workspace }}/${{ github.event.repository.name }}_build"
  ISO_NAME: "${{ github.event.repository.name }}-${{ inputs.stream_name }}.iso"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}-iso
  cancel-in-progress: true

jobs:
  build-iso:
    name: Build ISOs
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: ${{ fromJson(inputs.image_flavors) }}
        base_name: ["${{ inputs.brand_name }}"]
        stream_name: ["${{ inputs.stream_name }}"]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Setup Just
        run: |
          pipx install rust-just
          sudo mv $(which just) /usr/local/bin/just

      - name: Check Just Syntax
        shell: bash
        run: |
          just check

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Build ISO
        shell: bash
        run: |
          image_name="$(just image_name ${{ matrix.base_name }} ${{ matrix.stream_name }} ${{ matrix.image_flavor }})"
          just build-iso "${{ matrix.base_name }}" "${{ matrix.stream_name }}" "${{ matrix.image_flavor }}" "1" "1"
          echo "IMAGE_NAME=${image_name}" >> $GITHUB_ENV
          echo "ISO_BUILD_DIR=${{ github.workspace }}/${image_name}_build" >> $GITHUB_ENV
          echo "ISO_NAME=${image_name}-${{ matrix.stream_name }}.iso" >> $GITHUB_ENV

      - name: Move ISOs to Upload Directory
        id: upload-directory
        shell: bash
        run: |
          ISO_UPLOAD_DIR=${{ github.workspace }}/upload
          mkdir ${ISO_UPLOAD_DIR}
          mv ${{ env.ISO_BUILD_DIR }}/${{ env.ISO_NAME }} ${ISO_UPLOAD_DIR}
          mv ${{ env.ISO_BUILD_DIR }}/${{ env.ISO_NAME }}-CHECKSUM ${ISO_UPLOAD_DIR}
          echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> $GITHUB_OUTPUT

      - name: Upload to Job Artifacts
        if: github.ref_name == 'testing' || inputs.upload-to-cloudflare == false || github.event_name == 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ env.ISO_NAME }}
          path: ${{ steps.upload-directory.outputs.iso-upload-dir }}
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true

      - name: Upload ISOs and Checksum to R2 to Sarkinite Bucket
        if: github.ref_name == 'main' && contains(matrix.base_name,'sarkinite')
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          SOURCE_DIR: ${{ steps.upload-directory.outputs.iso-upload-dir }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy $SOURCE_DIR R2:sarkinite
