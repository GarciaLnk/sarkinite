#!/usr/bin/env bash
#shellcheck disable=SC2076

IMAGE_INFO="/usr/share/ublue-os/image-info.json"
IMAGE_NAME=$(jq -r '."image-name"' <"${IMAGE_INFO}")
IMAGE_FLAVOR=$(jq -r '."image-flavor"' <"${IMAGE_INFO}")

VEN_ID="$(cat /sys/devices/virtual/dmi/id/chassis_vendor)"
CPU_VENDOR=$(grep "vendor_id" "/proc/cpuinfo" | uniq | awk -F": " '{ print $2 }')

# SCRIPT VERSION
HWS_VER=8
HWS_VER_FILE="/etc/ublue/hws_version"
[[ -f ${HWS_VER_FILE} ]] && HWS_VER_RAN=$(cat "${HWS_VER_FILE}")

# IMAGE IDENTIFIERS
KNOWN_IMAGE_NAME_FILE="/etc/ublue/image_name"
[[ -f ${KNOWN_IMAGE_NAME_FILE} ]] && KNOWN_IMAGE_NAME=$(cat "${KNOWN_IMAGE_NAME_FILE}")
KNOWN_IMAGE_FLAVOR_FILE="/etc/ublue/image_flavor"
[[ -f ${KNOWN_IMAGE_FLAVOR_FILE} ]] && KNOWN_IMAGE_FLAVOR=$(cat "${KNOWN_IMAGE_FLAVOR_FILE}")

# Run script if updated
if [[ -f ${HWS_VER_FILE} && ${HWS_VER} == "${HWS_VER_RAN}" ]]; then
	if [[ -f ${KNOWN_IMAGE_NAME_FILE} && -f ${KNOWN_IMAGE_FLAVOR_FILE} ]]; then
		# Run script if image has been rebased
		if [[ ${IMAGE_NAME} == "${KNOWN_IMAGE_NAME}" && ${IMAGE_FLAVOR} == "${KNOWN_IMAGE_FLAVOR}" ]]; then
			echo "Hardware setup has already run. Exiting..."
			exit 0
		fi
	fi
fi

CPU_VENDOR=$(grep "vendor_id" "/proc/cpuinfo" | uniq | awk -F": " '{ print $2 }')
VEN_ID="$(cat /sys/devices/virtual/dmi/id/chassis_vendor)"
BIOS_VERSION="$(cat /sys/devices/virtual/dmi/id/bios_version 2>/dev/null)"

# GLOBAL
KARGS=$(rpm-ostree kargs)
NEEDED_KARGS=()
echo "Current kargs: ${KARGS}"
mkdir -p /etc/ublue

if [[ ${IMAGE_FLAVOR} =~ "nvidia" && ! ${KARGS} =~ "initcall_blacklist=simpledrm_platform_driver_init" ]]; then
	NEEDED_KARGS+=("--append-if-missing=initcall_blacklist=simpledrm_platform_driver_init")
fi

if [[ ${KARGS} =~ "nomodeset" ]]; then
	echo "Removing nomodeset"
	NEEDED_KARGS+=("--delete-if-present=nomodeset")
fi

if [[ ":Framework:" =~ ":${VEN_ID}:" ]]; then
	if [[ "GenuineIntel" == "${CPU_VENDOR}" ]]; then
		if [[ ! ${KARGS} =~ "hid_sensor_hub" ]]; then
			echo "Intel Framework Laptop detected, applying needed keyboard fix"
			NEEDED_KARGS+=("--append-if-missing=module_blacklist=hid_sensor_hub")
		fi
	fi
fi

#shellcheck disable=SC2128
if [[ -n ${NEEDED_KARGS} ]]; then
	echo "Found needed karg changes, applying the following: ${NEEDED_KARGS[*]}"
	plymouth display-message --text="Updating kargs - Please wait, this may take a while" || true
	rpm-ostree kargs "${NEEDED_KARGS[*]}" --reboot || exit 1
else
	echo "No karg changes needed"
fi

SYS_ID="$(cat /sys/devices/virtual/dmi/id/product_name)"

# FRAMEWORK 13 AMD FIXES
if [[ ${VEN_ID} == "Framework" && ${SYS_ID} == "Laptop 13 ("* && ${CPU_VENDOR} == "AuthenticAMD" ]]; then
	echo "Framework Laptop 13 AMD detected"

	# 3.5mm jack fix
	if [[ ! -f /etc/modprobe.d/alsa.conf ]]; then
		echo "Applying 3.5mm audio jack fix"
		tee /etc/modprobe.d/alsa.conf <<<"options snd-hda-intel index=1,0 model=auto,dell-headset-multi"
		echo 0 | tee /sys/module/snd_hda_intel/parameters/power_save
	fi

	# Suspend fix — apply or remove depending on BIOS version
	# On BIOS versions >= 3.09, the workaround is not needed
	# (https://knowledgebase.frame.work/framework-laptop-13-bios-and-driver-releases-amd-ryzen-7040-series-r1rXGVL16)
	if [[ "$(printf '%s\n' 03.09 "${BIOS_VERSION}" | sort -V | head -n1)" == "03.09" ]]; then
		# BIOS is >= 3.09, remove workaround if present
		if [[ -f /etc/udev/rules.d/20-suspend-fixes.rules ]]; then
			echo "BIOS ${BIOS_VERSION} >= 3.09 — removing old suspend workaround"
			rm -f /etc/udev/rules.d/20-suspend-fixes.rules
		fi
	else
		# BIOS is older, apply workaround
		if [[ ! -f /etc/udev/rules.d/20-suspend-fixes.rules ]]; then
			echo "BIOS ${BIOS_VERSION} < 3.09 — applying suspend workaround"
			echo 'ACTION=="add", SUBSYSTEM=="serio", DRIVERS=="atkbd", ATTR{power/wakeup}="disabled"' \
				>/etc/udev/rules.d/20-suspend-fixes.rules
		fi
	fi
fi

# Correct broken config files on some systems
if [[ -f "/etc/tuned/ppd.conf" ]] && ! grep "\[battery\]" "/etc/tuned/ppd.conf"; then
	cp -f "/usr/etc/tuned/ppd.conf" "/etc/tuned/ppd.conf"
fi

# Set default target to graphical, fixes rebase from base image
if grep -qv "graphical.target" <<<"$(systemctl get-default)"; then
	systemctl set-default graphical.target
fi

# Grub settings
# set grub timeout to 1
if ! grep -q "GRUB_TIMEOUT=" /etc/default/grub; then
	echo "GRUB_TIMEOUT=1" >>/etc/default/grub
else
	sed -i 's/GRUB_TIMEOUT=[0-9]*/GRUB_TIMEOUT=1/' /etc/default/grub
fi

# nuke hidden timeout as it will cause issues if GRUB_TIMEOUT exists
if grep -q "GRUB_HIDDEN_TIMEOUT=" /etc/default/grub; then
	sed -i 's/GRUB_HIDDEN_TIMEOUT=[0-9]*//' /etc/default/grub
fi

# set timeout style to menu to show grub during countdown
if ! grep -q "GRUB_TIMEOUT_STYLE=" /etc/default/grub; then
	echo "GRUB_TIMEOUT_STYLE=menu" >>/etc/default/grub
else
	sed -i 's/GRUB_TIMEOUT_STYLE=.*/GRUB_TIMEOUT_STYLE=menu/' /etc/default/grub
fi

# Autohide grub menu if boot is successful
grub2-editenv - set menu_auto_hide=2

# Update grub
if [[ -d /sys/firmware/efi ]]; then
	echo "Updating EFI grub config"
	grub2-mkconfig -o /etc/grub2-efi.cfg
else
	echo "Updating BIOS grub config"
	grub2-mkconfig -o /etc/grub2.cfg
fi

# Initialize etckeeper
if [[ ! -d /etc/.git ]]; then
	etckeeper init
fi

# Setup root bashrc
if [[ ! -f /root/.bashrc ]]; then
	if [[ -f /etc/bashrc ]]; then
		. /etc/bashrc
	fi
fi

echo "${IMAGE_NAME}" >"${KNOWN_IMAGE_NAME_FILE}"
echo "${IMAGE_FLAVOR}" >"${KNOWN_IMAGE_FLAVOR_FILE}"
echo "${HWS_VER}" >"${HWS_VER_FILE}"
